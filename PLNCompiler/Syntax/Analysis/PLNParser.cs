// This code was generated by the Gardens Point Parser Generator
// Copyright (c) Wayne Kelly, QUT 2005-2010
// (see accompanying GPPGcopyright.rtf)

// GPPG version 1.3.6
// Machine:  DESKTOP-9PD9D9Q
// DateTime: 25.06.2018 0:53:34
// UserName: 5
// Input file <PLNParser.y>

// options: no-lines gplex

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text;
using QUT.Gppg;
using System.IO;
using PLNCompiler.Syntax.SyntaxTree;

namespace PLNCompiler.Syntax.Analysis
{
public enum Tokens {
    error=1,EOF=2,IMPORT=3,USING=4,BEGIN=5,END=6,
    SEMICOLON=7,ASSIGN=8,ARRAY=9,IF=10,ELSE=11,WHILE=12,
    DO=13,LOOP=14,STEP=15,BREAK=16,CONTINUE=17,ALL=18,
    GOTO=19,PROCEDURE=20,FUNCTION=21,RETURNN=22,AUTO=23,DOT=24,
    COLON=25,PLUS=26,MINUS=27,DIV=28,MUL=29,EQUALLY=30,
    NOTEQUALLY=31,GREAT=32,LESS=33,GREATEQLS=34,LESSEQLS=35,AND=36,
    OR=37,XOR=38,LEFTSHIFT=39,RIGHTSHIFT=40,DIVTRUNC=41,MOD=42,
    NEW=43,INVERSE=44,LPAREN=45,RPAREN=46,SLPAREN=47,SRPAREN=48,
    TRUE=49,FALSE=50,NULL=51,REF=52,TYPEOF=53,SHIELD=54,
    SHARP=55,IS=56,AS=57,INTNUM=58,FLOATNUM=59,ID=60,
    DISABLE_SYSTEM_LIBRARY=61,CONSOLE_APPLICATION=62,WINDOWS_APPLICATION=63,STRING2=64,STRING1=65,ONELINECOMMENT=66,
    LSHIFT=67,RSHIFT=68,UNARYMINUS=69,UNARYPLUS=70,CAST=71};

public struct ValueType
{  
			public string stringValue;
			//......
			public DirectivesNode DirectivesValue;
			public DirectiveNode DirectiveValue;
			//......
			public ImportNode ImportValue;
			public ImportsNode ImportsValue;
			public UsingsNode UsingsValue;
			public UsingNode UsingValue;
			//......
			public TypeNameNode TypeNameValue;
			public TypeCollection TypeValueCollection; 
			public TypeNode TypeValue;
			public IdentiferNode IdentiferValue;
			public int IntValue;
			//......
			public BlockNode BlockValue;
			public StatementNode StatementValue;
			public LoopNode LoopValue;
			public VarDefineNode VarDefineValue;
			public IdentiferCollection IdentiferValueCollection;
			public FieldNode FieldValue;
			public MemberNode MemberValue;
			//.....
			public MethodInfo MethodValue;
			public FactArgumentNode FactArgumentValue;
			public ExpressionArgumentNode ExpressionArgumentValue;
			//.....
			public ConstNode ConstValue;
			public ExpressionNode ExpressionValue;
			public MethodArgumentsCollection MethodArgumentsValueCollection;
			public IndexerArgumentsCollection IndexerArgumentsValueCollection;
			
			//.....
       }
// Abstract base class for GPLEX scanners
public abstract class ScanBase : AbstractScanner<ValueType,Location> {
  private Location __yylloc = new Location();
  public override Location yylloc { get { return __yylloc; } set { __yylloc = value; } }
  protected virtual bool yywrap() { return true; }
}

public class PLNParser: ShiftReduceParser<ValueType, Location>
{
  // Verbatim content from PLNParser.y
	public ProgramNode Root{get;private set;}
	public PLNParser(AbstractScanner<ValueType, Location> scanner) : base(scanner) { }
  // End verbatim content from PLNParser.y

#pragma warning disable 649
  private static Dictionary<int, string> aliasses;
#pragma warning restore 649
  private static Rule[] rules = new Rule[153];
  private static State[] states = new State[277];
  private static string[] nonTerms = new string[] {
      "program", "directiveSection", "directives", "directive", "directiveSpelling", 
      "constDirective", "importSection", "imports", "import", "usingSection", 
      "usings", "using", "manyUsing", "usingSing", "type", "arrayType", "genericTypeSing", 
      "genericType", "genericArgs", "leftGeneric", "relaxLeftGeneric", "identifer", 
      "LabelName", "dimension", "shortStatement", "loopSpecial", "simpleStatement", 
      "fullIf", "statement", "goto", "assign", "varsDefine", "varDefineAssign", 
      "loop", "block", "statements", "intNumber", "constant", "factor", "mathExpression", 
      "expression", "if", "methodArgs", "indexsArgs", "indexs", "namespace", 
      "vars", "field", "genericField", "refField", "refFields", "member", "members", 
      "method", "methodRight", "methodArg", "expressionArg", "$accept", "empty", 
      };

  static PLNParser() {
    states[0] = new State(new int[]{55,267,3,-152,4,-152,5,-152},new int[]{-1,1,-2,3,-3,265,-5,275,-59,276});
    states[1] = new State(new int[]{2,2});
    states[2] = new State(-1);
    states[3] = new State(new int[]{3,261,4,-152,5,-152},new int[]{-7,4,-8,259,-9,263,-59,264});
    states[4] = new State(new int[]{4,247,5,-152},new int[]{-10,5,-11,245,-12,257,-59,258});
    states[5] = new State(new int[]{5,7},new int[]{-35,6});
    states[6] = new State(-2);
    states[7] = new State(new int[]{26,15,60,20,18,21,61,22,62,23,63,24,53,135,19,190,16,195,17,198,5,7,10,207,12,212,13,217,14,223,58,193,66,235,6,-152,7,-152},new int[]{-36,8,-59,242,-29,244,-27,11,-25,12,-32,14,-33,183,-31,184,-53,185,-52,121,-54,124,-22,188,-48,139,-49,140,-30,189,-26,194,-35,202,-42,203,-34,211,-23,232});
    states[8] = new State(new int[]{6,9,26,15,60,20,18,21,61,22,62,23,63,24,53,135,19,190,16,195,17,198,5,7,10,207,12,212,13,217,14,223,58,193,66,235,7,-152},new int[]{-29,10,-27,11,-25,12,-32,14,-33,183,-31,184,-53,185,-52,121,-54,124,-22,188,-48,139,-49,140,-30,189,-26,194,-59,201,-35,202,-42,203,-34,211,-23,232});
    states[9] = new State(-27);
    states[10] = new State(-30);
    states[11] = new State(-33);
    states[12] = new State(new int[]{7,13});
    states[13] = new State(-31);
    states[14] = new State(-45);
    states[15] = new State(new int[]{23,179,60,20,18,21,61,22,62,23,63,24,9,41},new int[]{-15,16,-18,30,-17,31,-22,34,-16,40});
    states[16] = new State(new int[]{60,20,18,21,61,22,62,23,63,24},new int[]{-47,17,-22,25});
    states[17] = new State(new int[]{25,18,7,-60,46,-60});
    states[18] = new State(new int[]{60,20,18,21,61,22,62,23,63,24},new int[]{-22,19});
    states[19] = new State(-65);
    states[20] = new State(-147);
    states[21] = new State(-148);
    states[22] = new State(-149);
    states[23] = new State(-150);
    states[24] = new State(-151);
    states[25] = new State(new int[]{8,26,25,-64,7,-64,46,-64});
    states[26] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-41,27,-40,58,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[27] = new State(new int[]{57,28,56,56,7,-62,46,-62});
    states[28] = new State(new int[]{60,20,18,21,61,22,62,23,63,24,9,41},new int[]{-15,29,-18,30,-17,31,-22,34,-16,40});
    states[29] = new State(-94);
    states[30] = new State(-138);
    states[31] = new State(new int[]{24,32,60,-140,18,-140,61,-140,62,-140,63,-140,57,-140,56,-140,7,-140,46,-140,25,-140,48,-140,32,-140,45,-140});
    states[32] = new State(new int[]{60,20,18,21,61,22,62,23,63,24},new int[]{-18,33,-17,31,-22,34});
    states[33] = new State(-141);
    states[34] = new State(new int[]{33,35,54,52,24,-146,60,-146,18,-146,61,-146,62,-146,63,-146,57,-146,56,-146,7,-146,46,-146,25,-146,48,-146,32,-146,45,-146});
    states[35] = new State(new int[]{60,20,18,21,61,22,62,23,63,24,9,41},new int[]{-19,36,-15,51,-18,30,-17,31,-22,34,-16,40});
    states[36] = new State(new int[]{32,37,25,38});
    states[37] = new State(-144);
    states[38] = new State(new int[]{60,20,18,21,61,22,62,23,63,24,9,41},new int[]{-15,39,-18,30,-17,31,-22,34,-16,40});
    states[39] = new State(-143);
    states[40] = new State(-139);
    states[41] = new State(new int[]{47,43,60,20,18,21,61,22,62,23,63,24,9,41},new int[]{-15,42,-18,30,-17,31,-22,34,-16,40});
    states[42] = new State(-133);
    states[43] = new State(new int[]{48,44,25,50},new int[]{-24,46});
    states[44] = new State(new int[]{60,20,18,21,61,22,62,23,63,24,9,41},new int[]{-15,45,-18,30,-17,31,-22,34,-16,40});
    states[45] = new State(-134);
    states[46] = new State(new int[]{48,47,25,49});
    states[47] = new State(new int[]{60,20,18,21,61,22,62,23,63,24,9,41},new int[]{-15,48,-18,30,-17,31,-22,34,-16,40});
    states[48] = new State(-135);
    states[49] = new State(-137);
    states[50] = new State(-136);
    states[51] = new State(-142);
    states[52] = new State(new int[]{33,53});
    states[53] = new State(new int[]{60,20,18,21,61,22,62,23,63,24,9,41},new int[]{-19,54,-15,51,-18,30,-17,31,-22,34,-16,40});
    states[54] = new State(new int[]{32,55,25,38});
    states[55] = new State(-145);
    states[56] = new State(new int[]{60,20,18,21,61,22,62,23,63,24,9,41},new int[]{-15,57,-18,30,-17,31,-22,34,-16,40});
    states[57] = new State(-95);
    states[58] = new State(new int[]{30,59,31,61,32,63,33,65,34,67,35,69,26,71,27,73,29,75,28,77,41,79,42,81,36,83,37,85,38,87,67,89,68,91,57,-93,56,-93,7,-93,46,-93,25,-93,48,-93});
    states[59] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-40,60,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[60] = new State(new int[]{30,-96,31,-96,32,-96,33,-96,34,-96,35,-96,26,71,27,73,29,75,28,77,41,79,42,81,36,83,37,85,38,87,67,89,68,91,57,-96,56,-96,7,-96,46,-96,25,-96,48,-96});
    states[61] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-40,62,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[62] = new State(new int[]{30,-97,31,-97,32,-97,33,-97,34,-97,35,-97,26,71,27,73,29,75,28,77,41,79,42,81,36,83,37,85,38,87,67,89,68,91,57,-97,56,-97,7,-97,46,-97,25,-97,48,-97});
    states[63] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-40,64,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[64] = new State(new int[]{30,-98,31,-98,32,-98,33,-98,34,-98,35,-98,26,71,27,73,29,75,28,77,41,79,42,81,36,83,37,85,38,87,67,89,68,91,57,-98,56,-98,7,-98,46,-98,25,-98,48,-98});
    states[65] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-40,66,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[66] = new State(new int[]{30,-99,31,-99,32,-99,33,-99,34,-99,35,-99,26,71,27,73,29,75,28,77,41,79,42,81,36,83,37,85,38,87,67,89,68,91,57,-99,56,-99,7,-99,46,-99,25,-99,48,-99});
    states[67] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-40,68,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[68] = new State(new int[]{30,-100,31,-100,32,-100,33,-100,34,-100,35,-100,26,71,27,73,29,75,28,77,41,79,42,81,36,83,37,85,38,87,67,89,68,91,57,-100,56,-100,7,-100,46,-100,25,-100,48,-100});
    states[69] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-40,70,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[70] = new State(new int[]{30,-101,31,-101,32,-101,33,-101,34,-101,35,-101,26,71,27,73,29,75,28,77,41,79,42,81,36,83,37,85,38,87,67,89,68,91,57,-101,56,-101,7,-101,46,-101,25,-101,48,-101});
    states[71] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-40,72,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[72] = new State(new int[]{30,-102,31,-102,32,-102,33,-102,34,-102,35,-102,26,-102,27,-102,29,75,28,77,41,79,42,81,36,83,37,-102,38,-102,67,89,68,91,57,-102,56,-102,7,-102,46,-102,25,-102,48,-102});
    states[73] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-40,74,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[74] = new State(new int[]{30,-103,31,-103,32,-103,33,-103,34,-103,35,-103,26,-103,27,-103,29,75,28,77,41,79,42,81,36,83,37,-103,38,-103,67,89,68,91,57,-103,56,-103,7,-103,46,-103,25,-103,48,-103});
    states[75] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-40,76,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[76] = new State(-104);
    states[77] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-40,78,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[78] = new State(-105);
    states[79] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-40,80,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[80] = new State(-106);
    states[81] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-40,82,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[82] = new State(-107);
    states[83] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-40,84,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[84] = new State(-108);
    states[85] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-40,86,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[86] = new State(new int[]{30,-109,31,-109,32,-109,33,-109,34,-109,35,-109,26,-109,27,-109,29,75,28,77,41,79,42,81,36,83,37,-109,38,-109,67,89,68,91,57,-109,56,-109,7,-109,46,-109,25,-109,48,-109});
    states[87] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-40,88,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[88] = new State(new int[]{30,-110,31,-110,32,-110,33,-110,34,-110,35,-110,26,-110,27,-110,29,75,28,77,41,79,42,81,36,83,37,-110,38,-110,67,89,68,91,57,-110,56,-110,7,-110,46,-110,25,-110,48,-110});
    states[89] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-40,90,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[90] = new State(-111);
    states[91] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-40,92,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[92] = new State(-112);
    states[93] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-40,94,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[94] = new State(-113);
    states[95] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-40,96,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[96] = new State(-114);
    states[97] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-40,98,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[98] = new State(-115);
    states[99] = new State(new int[]{9,172,60,20,18,21,61,22,62,23,63,24},new int[]{-18,100,-17,31,-22,34});
    states[100] = new State(new int[]{45,102},new int[]{-55,101});
    states[101] = new State(-116);
    states[102] = new State(new int[]{46,169,26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150,52,160},new int[]{-43,103,-56,171,-57,159,-41,111,-40,58,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[103] = new State(new int[]{46,104,25,157});
    states[104] = new State(new int[]{47,106,30,-152,31,-152,32,-152,33,-152,34,-152,35,-152,26,-152,27,-152,29,-152,28,-152,41,-152,42,-152,36,-152,37,-152,38,-152,67,-152,68,-152,57,-152,56,-152,7,-152,46,-152,25,-152,48,-152,24,-152,8,-152},new int[]{-45,105,-59,156});
    states[105] = new State(-83);
    states[106] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-44,107,-57,155,-41,111,-40,58,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[107] = new State(new int[]{48,108,25,109});
    states[108] = new State(-79);
    states[109] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-57,110,-41,111,-40,58,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[110] = new State(-82);
    states[111] = new State(new int[]{57,28,56,56,46,-87,25,-87,48,-87});
    states[112] = new State(new int[]{45,113});
    states[113] = new State(new int[]{60,20,18,21,61,22,62,23,63,24,9,41},new int[]{-15,114,-18,30,-17,31,-22,34,-16,40});
    states[114] = new State(new int[]{46,115});
    states[115] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-40,116,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[116] = new State(-118);
    states[117] = new State(-119);
    states[118] = new State(new int[]{24,119,30,-120,31,-120,32,-120,33,-120,34,-120,35,-120,26,-120,27,-120,29,-120,28,-120,41,-120,42,-120,36,-120,37,-120,38,-120,67,-120,68,-120,57,-120,56,-120,7,-120,46,-120,25,-120,48,-120});
    states[119] = new State(new int[]{60,20,18,21,61,22,62,23,63,24,53,135},new int[]{-53,120,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[120] = new State(-121);
    states[121] = new State(new int[]{24,122,8,-67,7,-67,30,-67,31,-67,32,-67,33,-67,34,-67,35,-67,26,-67,27,-67,29,-67,28,-67,41,-67,42,-67,36,-67,37,-67,38,-67,67,-67,68,-67,57,-67,56,-67,46,-67,25,-67,48,-67});
    states[122] = new State(new int[]{60,20,18,21,61,22,62,23,63,24,53,135},new int[]{-53,123,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[123] = new State(-68);
    states[124] = new State(-69);
    states[125] = new State(new int[]{54,130,47,106,45,-152,24,-152,30,-152,31,-152,32,-152,33,-152,34,-152,35,-152,26,-152,27,-152,29,-152,28,-152,41,-152,42,-152,36,-152,37,-152,38,-152,67,-152,68,-152,57,-152,56,-152,7,-152,46,-152,25,-152,48,-152,8,-152},new int[]{-21,126,-20,128,-45,129,-59,134});
    states[126] = new State(new int[]{45,102},new int[]{-55,127});
    states[127] = new State(-74);
    states[128] = new State(new int[]{24,-73,8,-73,7,-73,30,-73,31,-73,32,-73,33,-73,34,-73,35,-73,26,-73,27,-73,29,-73,28,-73,41,-73,42,-73,36,-73,37,-73,38,-73,67,-73,68,-73,57,-73,56,-73,46,-73,25,-73,48,-73,45,-76});
    states[129] = new State(-72);
    states[130] = new State(new int[]{33,131});
    states[131] = new State(new int[]{60,20,18,21,61,22,62,23,63,24,9,41},new int[]{-19,132,-15,51,-18,30,-17,31,-22,34,-16,40});
    states[132] = new State(new int[]{32,133,25,38});
    states[133] = new State(-78);
    states[134] = new State(new int[]{45,-77,24,-80,30,-80,31,-80,32,-80,33,-80,34,-80,35,-80,26,-80,27,-80,29,-80,28,-80,41,-80,42,-80,36,-80,37,-80,38,-80,67,-80,68,-80,57,-80,56,-80,7,-80,46,-80,25,-80,48,-80,8,-80});
    states[135] = new State(new int[]{45,136});
    states[136] = new State(new int[]{60,20,18,21,61,22,62,23,63,24,9,41},new int[]{-15,137,-18,30,-17,31,-22,34,-16,40});
    states[137] = new State(new int[]{46,138});
    states[138] = new State(-75);
    states[139] = new State(-70);
    states[140] = new State(-71);
    states[141] = new State(-125);
    states[142] = new State(-132);
    states[143] = new State(-126);
    states[144] = new State(-127);
    states[145] = new State(-128);
    states[146] = new State(-129);
    states[147] = new State(-130);
    states[148] = new State(-131);
    states[149] = new State(-122);
    states[150] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-41,151,-40,58,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[151] = new State(new int[]{46,152,57,28,56,56});
    states[152] = new State(new int[]{24,153,30,-123,31,-123,32,-123,33,-123,34,-123,35,-123,26,-123,27,-123,29,-123,28,-123,41,-123,42,-123,36,-123,37,-123,38,-123,67,-123,68,-123,57,-123,56,-123,7,-123,46,-123,25,-123,48,-123});
    states[153] = new State(new int[]{60,20,18,21,61,22,62,23,63,24,53,135},new int[]{-53,154,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[154] = new State(-124);
    states[155] = new State(-81);
    states[156] = new State(-80);
    states[157] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150,52,160},new int[]{-56,158,-57,159,-41,111,-40,58,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[158] = new State(-86);
    states[159] = new State(-88);
    states[160] = new State(new int[]{60,20,18,21,61,22,62,23,63,24},new int[]{-51,161,-50,162,-22,165});
    states[161] = new State(-89);
    states[162] = new State(new int[]{24,163,46,-91,25,-91});
    states[163] = new State(new int[]{60,20,18,21,61,22,62,23,63,24},new int[]{-51,164,-50,162,-22,165});
    states[164] = new State(-92);
    states[165] = new State(new int[]{54,130,24,-152,46,-152,25,-152},new int[]{-21,166,-20,167,-59,168});
    states[166] = new State(-90);
    states[167] = new State(-76);
    states[168] = new State(-77);
    states[169] = new State(new int[]{47,106,30,-152,31,-152,32,-152,33,-152,34,-152,35,-152,26,-152,27,-152,29,-152,28,-152,41,-152,42,-152,36,-152,37,-152,38,-152,67,-152,68,-152,57,-152,56,-152,7,-152,46,-152,25,-152,48,-152,24,-152,8,-152},new int[]{-45,170,-59,156});
    states[170] = new State(-84);
    states[171] = new State(-85);
    states[172] = new State(new int[]{45,173});
    states[173] = new State(new int[]{60,20,18,21,61,22,62,23,63,24,9,41},new int[]{-15,174,-18,30,-17,31,-22,34,-16,40});
    states[174] = new State(new int[]{25,175});
    states[175] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150,52,160},new int[]{-43,176,-56,171,-57,159,-41,111,-40,58,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[176] = new State(new int[]{46,177,25,157});
    states[177] = new State(new int[]{47,106,30,-152,31,-152,32,-152,33,-152,34,-152,35,-152,26,-152,27,-152,29,-152,28,-152,41,-152,42,-152,36,-152,37,-152,38,-152,67,-152,68,-152,57,-152,56,-152,7,-152,46,-152,25,-152,48,-152},new int[]{-45,178,-59,156});
    states[178] = new State(-117);
    states[179] = new State(new int[]{60,20,18,21,61,22,62,23,63,24},new int[]{-22,180});
    states[180] = new State(new int[]{8,181});
    states[181] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-41,182,-40,58,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[182] = new State(new int[]{57,28,56,56,7,-63,46,-63});
    states[183] = new State(-61);
    states[184] = new State(-46);
    states[185] = new State(new int[]{8,186,7,-47,46,-47});
    states[186] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-41,187,-40,58,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[187] = new State(new int[]{57,28,56,56,7,-66,46,-66});
    states[188] = new State(new int[]{54,130,47,106,41,-58,45,-152,24,-152,8,-152,7,-152},new int[]{-21,126,-20,128,-45,129,-59,134});
    states[189] = new State(-48);
    states[190] = new State(new int[]{60,20,18,21,61,22,62,23,63,24,58,193},new int[]{-23,191,-22,192});
    states[191] = new State(-57);
    states[192] = new State(-58);
    states[193] = new State(-59);
    states[194] = new State(-49);
    states[195] = new State(new int[]{18,197,58,142,7,-51,46,-51},new int[]{-37,196});
    states[196] = new State(-52);
    states[197] = new State(-53);
    states[198] = new State(new int[]{18,200,58,142,7,-54,46,-54},new int[]{-37,199});
    states[199] = new State(-55);
    states[200] = new State(-56);
    states[201] = new State(-50);
    states[202] = new State(-32);
    states[203] = new State(new int[]{26,15,60,20,18,21,61,22,62,23,63,24,53,135,19,190,16,195,17,198,5,7,10,207,12,212,13,217,14,223,58,193,66,235,7,-152},new int[]{-28,204,-29,236,-27,237,-25,12,-32,14,-33,183,-31,184,-53,185,-52,121,-54,124,-22,188,-48,139,-49,140,-30,189,-26,194,-59,201,-35,202,-42,238,-34,211,-23,232});
    states[204] = new State(new int[]{11,205});
    states[205] = new State(new int[]{26,15,60,20,18,21,61,22,62,23,63,24,53,135,19,190,16,195,17,198,5,7,10,207,12,212,13,217,14,223,58,193,66,235,7,-152},new int[]{-29,206,-27,11,-25,12,-32,14,-33,183,-31,184,-53,185,-52,121,-54,124,-22,188,-48,139,-49,140,-30,189,-26,194,-59,201,-35,202,-42,203,-34,211,-23,232});
    states[206] = new State(-34);
    states[207] = new State(new int[]{45,208});
    states[208] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-41,209,-40,58,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[209] = new State(new int[]{46,210,57,28,56,56});
    states[210] = new State(-44);
    states[211] = new State(-36);
    states[212] = new State(new int[]{45,213});
    states[213] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-41,214,-40,58,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[214] = new State(new int[]{46,215,57,28,56,56});
    states[215] = new State(new int[]{26,15,60,20,18,21,61,22,62,23,63,24,53,135,19,190,16,195,17,198,5,7,10,207,12,212,13,217,14,223,58,193,66,235,7,-152},new int[]{-29,216,-27,11,-25,12,-32,14,-33,183,-31,184,-53,185,-52,121,-54,124,-22,188,-48,139,-49,140,-30,189,-26,194,-59,201,-35,202,-42,203,-34,211,-23,232});
    states[216] = new State(-39);
    states[217] = new State(new int[]{26,15,60,20,18,21,61,22,62,23,63,24,53,135,19,190,16,195,17,198,5,7,10,207,12,212,13,217,14,223,58,193,66,235,7,-152},new int[]{-29,218,-27,11,-25,12,-32,14,-33,183,-31,184,-53,185,-52,121,-54,124,-22,188,-48,139,-49,140,-30,189,-26,194,-59,201,-35,202,-42,203,-34,211,-23,232});
    states[218] = new State(new int[]{12,219});
    states[219] = new State(new int[]{45,220});
    states[220] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-41,221,-40,58,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[221] = new State(new int[]{46,222,57,28,56,56});
    states[222] = new State(-40);
    states[223] = new State(new int[]{45,224});
    states[224] = new State(new int[]{26,15,60,20,18,21,61,22,62,23,63,24,53,135,19,190,16,195,17,198,7,-152},new int[]{-25,225,-32,14,-33,183,-31,184,-53,185,-52,121,-54,124,-22,125,-48,139,-49,140,-30,189,-26,194,-59,201});
    states[225] = new State(new int[]{7,226});
    states[226] = new State(new int[]{26,93,27,95,44,97,43,99,54,112,58,142,59,143,64,144,65,145,49,146,50,147,51,148,60,20,18,21,61,22,62,23,63,24,53,135,45,150},new int[]{-41,227,-40,58,-39,117,-38,118,-37,141,-53,149,-52,121,-54,124,-22,125,-48,139,-49,140});
    states[227] = new State(new int[]{7,228,57,28,56,56});
    states[228] = new State(new int[]{26,15,60,20,18,21,61,22,62,23,63,24,53,135,19,190,16,195,17,198,46,-152},new int[]{-25,229,-32,14,-33,183,-31,184,-53,185,-52,121,-54,124,-22,125,-48,139,-49,140,-30,189,-26,194,-59,201});
    states[229] = new State(new int[]{46,230});
    states[230] = new State(new int[]{26,15,60,20,18,21,61,22,62,23,63,24,53,135,19,190,16,195,17,198,5,7,10,207,12,212,13,217,14,223,58,193,66,235,7,-152},new int[]{-29,231,-27,11,-25,12,-32,14,-33,183,-31,184,-53,185,-52,121,-54,124,-22,188,-48,139,-49,140,-30,189,-26,194,-59,201,-35,202,-42,203,-34,211,-23,232});
    states[231] = new State(-41);
    states[232] = new State(new int[]{41,233});
    states[233] = new State(new int[]{26,15,60,20,18,21,61,22,62,23,63,24,53,135,19,190,16,195,17,198,5,7,10,207,12,212,13,217,14,223,58,193,66,235,7,-152},new int[]{-29,234,-27,11,-25,12,-32,14,-33,183,-31,184,-53,185,-52,121,-54,124,-22,188,-48,139,-49,140,-30,189,-26,194,-59,201,-35,202,-42,203,-34,211,-23,232});
    states[234] = new State(-37);
    states[235] = new State(-38);
    states[236] = new State(-35);
    states[237] = new State(new int[]{11,-42,6,-33,26,-33,60,-33,18,-33,61,-33,62,-33,63,-33,53,-33,19,-33,16,-33,17,-33,5,-33,10,-33,12,-33,13,-33,14,-33,58,-33,66,-33,7,-33});
    states[238] = new State(new int[]{26,15,60,20,18,21,61,22,62,23,63,24,53,135,19,190,16,195,17,198,5,7,10,207,12,212,13,217,14,223,58,193,66,235,7,-152},new int[]{-28,239,-29,236,-27,237,-25,12,-32,14,-33,183,-31,184,-53,185,-52,121,-54,124,-22,188,-48,139,-49,140,-30,189,-26,194,-59,201,-35,202,-42,238,-34,211,-23,232});
    states[239] = new State(new int[]{11,240});
    states[240] = new State(new int[]{26,15,60,20,18,21,61,22,62,23,63,24,53,135,19,190,16,195,17,198,5,7,10,207,12,212,13,217,14,223,58,193,66,235,7,-152},new int[]{-28,241,-29,206,-27,237,-25,12,-32,14,-33,183,-31,184,-53,185,-52,121,-54,124,-22,188,-48,139,-49,140,-30,189,-26,194,-59,201,-35,202,-42,238,-34,211,-23,232});
    states[241] = new State(-43);
    states[242] = new State(new int[]{6,243,7,-50});
    states[243] = new State(-28);
    states[244] = new State(-29);
    states[245] = new State(new int[]{4,247,5,-17},new int[]{-12,246});
    states[246] = new State(-20);
    states[247] = new State(new int[]{60,20,18,21,61,22,62,23,63,24},new int[]{-13,248,-14,256,-46,252,-22,255});
    states[248] = new State(new int[]{7,249,25,250});
    states[249] = new State(-21);
    states[250] = new State(new int[]{60,20,18,21,61,22,62,23,63,24},new int[]{-14,251,-46,252,-22,255});
    states[251] = new State(-23);
    states[252] = new State(new int[]{24,253,7,-24,25,-24});
    states[253] = new State(new int[]{60,20,18,21,61,22,62,23,63,24},new int[]{-22,254});
    states[254] = new State(-26);
    states[255] = new State(-25);
    states[256] = new State(-22);
    states[257] = new State(-19);
    states[258] = new State(-18);
    states[259] = new State(new int[]{3,261,4,-12,5,-12},new int[]{-9,260});
    states[260] = new State(-15);
    states[261] = new State(new int[]{64,262});
    states[262] = new State(-16);
    states[263] = new State(-14);
    states[264] = new State(-13);
    states[265] = new State(new int[]{55,267,3,-3,4,-3,5,-3},new int[]{-5,266});
    states[266] = new State(-6);
    states[267] = new State(new int[]{47,268});
    states[268] = new State(new int[]{61,272,62,273,63,274},new int[]{-4,269,-6,271});
    states[269] = new State(new int[]{48,270});
    states[270] = new State(-7);
    states[271] = new State(-8);
    states[272] = new State(-9);
    states[273] = new State(-10);
    states[274] = new State(-11);
    states[275] = new State(-5);
    states[276] = new State(-4);

    rules[1] = new Rule(-58, new int[]{-1,2});
    rules[2] = new Rule(-1, new int[]{-2,-7,-10,-35});
    rules[3] = new Rule(-2, new int[]{-3});
    rules[4] = new Rule(-2, new int[]{-59});
    rules[5] = new Rule(-3, new int[]{-5});
    rules[6] = new Rule(-3, new int[]{-3,-5});
    rules[7] = new Rule(-5, new int[]{55,47,-4,48});
    rules[8] = new Rule(-4, new int[]{-6});
    rules[9] = new Rule(-6, new int[]{61});
    rules[10] = new Rule(-6, new int[]{62});
    rules[11] = new Rule(-6, new int[]{63});
    rules[12] = new Rule(-7, new int[]{-8});
    rules[13] = new Rule(-7, new int[]{-59});
    rules[14] = new Rule(-8, new int[]{-9});
    rules[15] = new Rule(-8, new int[]{-8,-9});
    rules[16] = new Rule(-9, new int[]{3,64});
    rules[17] = new Rule(-10, new int[]{-11});
    rules[18] = new Rule(-10, new int[]{-59});
    rules[19] = new Rule(-11, new int[]{-12});
    rules[20] = new Rule(-11, new int[]{-11,-12});
    rules[21] = new Rule(-12, new int[]{4,-13,7});
    rules[22] = new Rule(-13, new int[]{-14});
    rules[23] = new Rule(-13, new int[]{-13,25,-14});
    rules[24] = new Rule(-14, new int[]{-46});
    rules[25] = new Rule(-46, new int[]{-22});
    rules[26] = new Rule(-46, new int[]{-46,24,-22});
    rules[27] = new Rule(-35, new int[]{5,-36,6});
    rules[28] = new Rule(-35, new int[]{5,-59,6});
    rules[29] = new Rule(-36, new int[]{-29});
    rules[30] = new Rule(-36, new int[]{-36,-29});
    rules[31] = new Rule(-27, new int[]{-25,7});
    rules[32] = new Rule(-27, new int[]{-35});
    rules[33] = new Rule(-29, new int[]{-27});
    rules[34] = new Rule(-29, new int[]{-42,-28,11,-29});
    rules[35] = new Rule(-29, new int[]{-42,-29});
    rules[36] = new Rule(-29, new int[]{-34});
    rules[37] = new Rule(-29, new int[]{-23,41,-29});
    rules[38] = new Rule(-29, new int[]{66});
    rules[39] = new Rule(-34, new int[]{12,45,-41,46,-29});
    rules[40] = new Rule(-34, new int[]{13,-29,12,45,-41,46});
    rules[41] = new Rule(-34, new int[]{14,45,-25,7,-41,7,-25,46,-29});
    rules[42] = new Rule(-28, new int[]{-27});
    rules[43] = new Rule(-28, new int[]{-42,-28,11,-28});
    rules[44] = new Rule(-42, new int[]{10,45,-41,46});
    rules[45] = new Rule(-25, new int[]{-32});
    rules[46] = new Rule(-25, new int[]{-31});
    rules[47] = new Rule(-25, new int[]{-53});
    rules[48] = new Rule(-25, new int[]{-30});
    rules[49] = new Rule(-25, new int[]{-26});
    rules[50] = new Rule(-25, new int[]{-59});
    rules[51] = new Rule(-26, new int[]{16});
    rules[52] = new Rule(-26, new int[]{16,-37});
    rules[53] = new Rule(-26, new int[]{16,18});
    rules[54] = new Rule(-26, new int[]{17});
    rules[55] = new Rule(-26, new int[]{17,-37});
    rules[56] = new Rule(-26, new int[]{17,18});
    rules[57] = new Rule(-30, new int[]{19,-23});
    rules[58] = new Rule(-23, new int[]{-22});
    rules[59] = new Rule(-23, new int[]{58});
    rules[60] = new Rule(-32, new int[]{26,-15,-47});
    rules[61] = new Rule(-32, new int[]{-33});
    rules[62] = new Rule(-33, new int[]{26,-15,-22,8,-41});
    rules[63] = new Rule(-33, new int[]{26,23,-22,8,-41});
    rules[64] = new Rule(-47, new int[]{-22});
    rules[65] = new Rule(-47, new int[]{-47,25,-22});
    rules[66] = new Rule(-31, new int[]{-53,8,-41});
    rules[67] = new Rule(-53, new int[]{-52});
    rules[68] = new Rule(-53, new int[]{-52,24,-53});
    rules[69] = new Rule(-52, new int[]{-54});
    rules[70] = new Rule(-52, new int[]{-48});
    rules[71] = new Rule(-48, new int[]{-49});
    rules[72] = new Rule(-48, new int[]{-22,-45});
    rules[73] = new Rule(-49, new int[]{-22,-20});
    rules[74] = new Rule(-54, new int[]{-22,-21,-55});
    rules[75] = new Rule(-54, new int[]{53,45,-15,46});
    rules[76] = new Rule(-21, new int[]{-20});
    rules[77] = new Rule(-21, new int[]{-59});
    rules[78] = new Rule(-20, new int[]{54,33,-19,32});
    rules[79] = new Rule(-45, new int[]{47,-44,48});
    rules[80] = new Rule(-45, new int[]{-59});
    rules[81] = new Rule(-44, new int[]{-57});
    rules[82] = new Rule(-44, new int[]{-44,25,-57});
    rules[83] = new Rule(-55, new int[]{45,-43,46,-45});
    rules[84] = new Rule(-55, new int[]{45,46,-45});
    rules[85] = new Rule(-43, new int[]{-56});
    rules[86] = new Rule(-43, new int[]{-43,25,-56});
    rules[87] = new Rule(-57, new int[]{-41});
    rules[88] = new Rule(-56, new int[]{-57});
    rules[89] = new Rule(-56, new int[]{52,-51});
    rules[90] = new Rule(-50, new int[]{-22,-21});
    rules[91] = new Rule(-51, new int[]{-50});
    rules[92] = new Rule(-51, new int[]{-50,24,-51});
    rules[93] = new Rule(-41, new int[]{-40});
    rules[94] = new Rule(-41, new int[]{-41,57,-15});
    rules[95] = new Rule(-41, new int[]{-41,56,-15});
    rules[96] = new Rule(-40, new int[]{-40,30,-40});
    rules[97] = new Rule(-40, new int[]{-40,31,-40});
    rules[98] = new Rule(-40, new int[]{-40,32,-40});
    rules[99] = new Rule(-40, new int[]{-40,33,-40});
    rules[100] = new Rule(-40, new int[]{-40,34,-40});
    rules[101] = new Rule(-40, new int[]{-40,35,-40});
    rules[102] = new Rule(-40, new int[]{-40,26,-40});
    rules[103] = new Rule(-40, new int[]{-40,27,-40});
    rules[104] = new Rule(-40, new int[]{-40,29,-40});
    rules[105] = new Rule(-40, new int[]{-40,28,-40});
    rules[106] = new Rule(-40, new int[]{-40,41,-40});
    rules[107] = new Rule(-40, new int[]{-40,42,-40});
    rules[108] = new Rule(-40, new int[]{-40,36,-40});
    rules[109] = new Rule(-40, new int[]{-40,37,-40});
    rules[110] = new Rule(-40, new int[]{-40,38,-40});
    rules[111] = new Rule(-40, new int[]{-40,67,-40});
    rules[112] = new Rule(-40, new int[]{-40,68,-40});
    rules[113] = new Rule(-40, new int[]{26,-40});
    rules[114] = new Rule(-40, new int[]{27,-40});
    rules[115] = new Rule(-40, new int[]{44,-40});
    rules[116] = new Rule(-40, new int[]{43,-18,-55});
    rules[117] = new Rule(-40, new int[]{43,9,45,-15,25,-43,46,-45});
    rules[118] = new Rule(-40, new int[]{54,45,-15,46,-40});
    rules[119] = new Rule(-40, new int[]{-39});
    rules[120] = new Rule(-39, new int[]{-38});
    rules[121] = new Rule(-39, new int[]{-38,24,-53});
    rules[122] = new Rule(-39, new int[]{-53});
    rules[123] = new Rule(-39, new int[]{45,-41,46});
    rules[124] = new Rule(-39, new int[]{45,-41,46,24,-53});
    rules[125] = new Rule(-38, new int[]{-37});
    rules[126] = new Rule(-38, new int[]{59});
    rules[127] = new Rule(-38, new int[]{64});
    rules[128] = new Rule(-38, new int[]{65});
    rules[129] = new Rule(-38, new int[]{49});
    rules[130] = new Rule(-38, new int[]{50});
    rules[131] = new Rule(-38, new int[]{51});
    rules[132] = new Rule(-37, new int[]{58});
    rules[133] = new Rule(-16, new int[]{9,-15});
    rules[134] = new Rule(-16, new int[]{9,47,48,-15});
    rules[135] = new Rule(-16, new int[]{9,47,-24,48,-15});
    rules[136] = new Rule(-24, new int[]{25});
    rules[137] = new Rule(-24, new int[]{-24,25});
    rules[138] = new Rule(-15, new int[]{-18});
    rules[139] = new Rule(-15, new int[]{-16});
    rules[140] = new Rule(-18, new int[]{-17});
    rules[141] = new Rule(-18, new int[]{-17,24,-18});
    rules[142] = new Rule(-19, new int[]{-15});
    rules[143] = new Rule(-19, new int[]{-19,25,-15});
    rules[144] = new Rule(-17, new int[]{-22,33,-19,32});
    rules[145] = new Rule(-17, new int[]{-22,54,33,-19,32});
    rules[146] = new Rule(-17, new int[]{-22});
    rules[147] = new Rule(-22, new int[]{60});
    rules[148] = new Rule(-22, new int[]{18});
    rules[149] = new Rule(-22, new int[]{61});
    rules[150] = new Rule(-22, new int[]{62});
    rules[151] = new Rule(-22, new int[]{63});
    rules[152] = new Rule(-59, new int[]{});

    aliasses = new Dictionary<int, string>();
    aliasses.Add(7, "\";\"");
    aliasses.Add(8, "\"=\"");
    aliasses.Add(24, "\".\"");
    aliasses.Add(25, "\",\"");
    aliasses.Add(26, "\"+\"");
    aliasses.Add(27, "\"-\"");
    aliasses.Add(28, "\"/\"");
    aliasses.Add(29, "\"*\"");
    aliasses.Add(30, "\"==\"");
    aliasses.Add(31, "\"<>\"");
    aliasses.Add(32, "\">\"");
    aliasses.Add(33, "\"<\"");
    aliasses.Add(34, "\">=\"");
    aliasses.Add(35, "\"<=\"");
    aliasses.Add(39, "\"<<\"");
    aliasses.Add(40, "\">>\"");
    aliasses.Add(41, "\":\"");
    aliasses.Add(42, "\"%\"");
    aliasses.Add(45, "\"(\"");
    aliasses.Add(46, "\")\"");
    aliasses.Add(47, "\"[\"");
    aliasses.Add(48, "\"]\"");
    aliasses.Add(55, "\"#\"");
  }

  protected override void Initialize() {
    this.InitSpecialTokens((int)Tokens.error, (int)Tokens.EOF);
    this.InitStates(states);
    this.InitRules(rules);
    this.InitNonTerminals(nonTerms);
  }

  protected override void DoAction(int action)
  {
    switch (action)
    {
      case 2: // program -> directiveSection, importSection, usingSection, block
{ Root = new ProgramNode(ValueStack[ValueStack.Depth-4].DirectivesValue,ValueStack[ValueStack.Depth-3].ImportsValue,ValueStack[ValueStack.Depth-2].UsingsValue,ValueStack[ValueStack.Depth-1].BlockValue,CurrentLocationSpan); }
        break;
      case 3: // directiveSection -> directives
{ CurrentSemanticValue.DirectivesValue = ValueStack[ValueStack.Depth-1].DirectivesValue; }
        break;
      case 4: // directiveSection -> empty
{ CurrentSemanticValue.DirectivesValue = null; }
        break;
      case 5: // directives -> directiveSpelling
{ CurrentSemanticValue.DirectivesValue = new DirectivesNode(ValueStack[ValueStack.Depth-1].DirectiveValue,CurrentLocationSpan); }
        break;
      case 6: // directives -> directives, directiveSpelling
{ValueStack[ValueStack.Depth-2].DirectivesValue.Directives.Add(ValueStack[ValueStack.Depth-1].DirectiveValue); CurrentSemanticValue.DirectivesValue = ValueStack[ValueStack.Depth-2].DirectivesValue;}
        break;
      case 7: // directiveSpelling -> "#", "[", directive, "]"
{ CurrentSemanticValue.DirectiveValue = ValueStack[ValueStack.Depth-2].DirectiveValue; }
        break;
      case 8: // directive -> constDirective
{ CurrentSemanticValue.DirectiveValue = ValueStack[ValueStack.Depth-1].DirectiveValue; }
        break;
      case 9: // constDirective -> DISABLE_SYSTEM_LIBRARY
{ CurrentSemanticValue.DirectiveValue = new ConstDirectiveNode(ValueStack[ValueStack.Depth-1].stringValue,DirectiveKind.DisableSystemLibrary,CurrentLocationSpan); }
        break;
      case 10: // constDirective -> CONSOLE_APPLICATION
{ CurrentSemanticValue.DirectiveValue = new ConstDirectiveNode(ValueStack[ValueStack.Depth-1].stringValue,DirectiveKind.ConsoleApplication,CurrentLocationSpan); }
        break;
      case 11: // constDirective -> WINDOWS_APPLICATION
{ CurrentSemanticValue.DirectiveValue = new ConstDirectiveNode(ValueStack[ValueStack.Depth-1].stringValue,DirectiveKind.WindowApplication,CurrentLocationSpan); }
        break;
      case 12: // importSection -> imports
{ CurrentSemanticValue.ImportsValue = ValueStack[ValueStack.Depth-1].ImportsValue; }
        break;
      case 13: // importSection -> empty
{ CurrentSemanticValue.ImportsValue = null; }
        break;
      case 14: // imports -> import
{ CurrentSemanticValue.ImportsValue = new ImportsNode(ValueStack[ValueStack.Depth-1].ImportValue); }
        break;
      case 15: // imports -> imports, import
{ ValueStack[ValueStack.Depth-2].ImportsValue.Imports.Add(ValueStack[ValueStack.Depth-1].ImportValue); CurrentSemanticValue.ImportsValue = ValueStack[ValueStack.Depth-2].ImportsValue; }
        break;
      case 16: // import -> IMPORT, STRING2
{ CurrentSemanticValue.ImportValue = new ImportNode(ValueStack[ValueStack.Depth-1].stringValue,LocationStack[LocationStack.Depth-1]); }
        break;
      case 17: // usingSection -> usings
{ CurrentSemanticValue.UsingsValue = ValueStack[ValueStack.Depth-1].UsingsValue; }
        break;
      case 18: // usingSection -> empty
{ CurrentSemanticValue.UsingsValue = null; }
        break;
      case 19: // usings -> using
{ CurrentSemanticValue.UsingsValue = ValueStack[ValueStack.Depth-1].UsingsValue; }
        break;
      case 20: // usings -> usings, using
{ ValueStack[ValueStack.Depth-2].UsingsValue.Usings.AddRange(ValueStack[ValueStack.Depth-1].UsingsValue.Usings); CurrentSemanticValue.UsingsValue = ValueStack[ValueStack.Depth-2].UsingsValue; }
        break;
      case 21: // using -> USING, manyUsing, ";"
{ CurrentSemanticValue.UsingsValue = ValueStack[ValueStack.Depth-2].UsingsValue; }
        break;
      case 22: // manyUsing -> usingSing
{ CurrentSemanticValue.UsingsValue = new UsingsNode(ValueStack[ValueStack.Depth-1].UsingValue); }
        break;
      case 23: // manyUsing -> manyUsing, ",", usingSing
{ ValueStack[ValueStack.Depth-3].UsingsValue.Usings.Add(ValueStack[ValueStack.Depth-1].UsingValue); CurrentSemanticValue.UsingsValue = ValueStack[ValueStack.Depth-3].UsingsValue; }
        break;
      case 24: // usingSing -> namespace
{ CurrentSemanticValue.UsingValue = new UsingNode(ValueStack[ValueStack.Depth-1].IdentiferValueCollection,CurrentLocationSpan); }
        break;
      case 25: // namespace -> identifer
{ CurrentSemanticValue.IdentiferValueCollection = new IdentiferCollection(); CurrentSemanticValue.IdentiferValueCollection.Add(ValueStack[ValueStack.Depth-1].IdentiferValue); }
        break;
      case 26: // namespace -> namespace, ".", identifer
{ CurrentSemanticValue.IdentiferValueCollection = ValueStack[ValueStack.Depth-3].IdentiferValueCollection; CurrentSemanticValue.IdentiferValueCollection.Add(ValueStack[ValueStack.Depth-1].IdentiferValue); }
        break;
      case 27: // block -> BEGIN, statements, END
{ CurrentSemanticValue.BlockValue = ValueStack[ValueStack.Depth-2].BlockValue; }
        break;
      case 28: // block -> BEGIN, empty, END
{ CurrentSemanticValue.BlockValue = new BlockNode(CurrentLocationSpan); }
        break;
      case 29: // statements -> statement
{ CurrentSemanticValue.BlockValue = new BlockNode(ValueStack[ValueStack.Depth-1].StatementValue,CurrentLocationSpan); }
        break;
      case 30: // statements -> statements, statement
{ ValueStack[ValueStack.Depth-2].BlockValue.Statements.Add(ValueStack[ValueStack.Depth-1].StatementValue); CurrentSemanticValue.BlockValue = ValueStack[ValueStack.Depth-2].BlockValue; }
        break;
      case 31: // simpleStatement -> shortStatement, ";"
{ CurrentSemanticValue.StatementValue = ValueStack[ValueStack.Depth-2].StatementValue; }
        break;
      case 32: // simpleStatement -> block
{ CurrentSemanticValue.StatementValue = ValueStack[ValueStack.Depth-1].BlockValue; }
        break;
      case 33: // statement -> simpleStatement
{ CurrentSemanticValue.StatementValue = ValueStack[ValueStack.Depth-1].StatementValue; }
        break;
      case 34: // statement -> if, fullIf, ELSE, statement
{ CurrentSemanticValue.StatementValue = new IfElseNode(ValueStack[ValueStack.Depth-4].ExpressionValue,ValueStack[ValueStack.Depth-3].StatementValue,ValueStack[ValueStack.Depth-1].StatementValue,CurrentLocationSpan); }
        break;
      case 35: // statement -> if, statement
{ CurrentSemanticValue.StatementValue = new IfElseNode(ValueStack[ValueStack.Depth-2].ExpressionValue,ValueStack[ValueStack.Depth-1].StatementValue,CurrentLocationSpan); }
        break;
      case 36: // statement -> loop
{ CurrentSemanticValue.StatementValue = ValueStack[ValueStack.Depth-1].LoopValue; }
        break;
      case 37: // statement -> LabelName, ":", statement
{ CurrentSemanticValue.StatementValue = new LabelDefineNode(ValueStack[ValueStack.Depth-3].IdentiferValue,ValueStack[ValueStack.Depth-1].StatementValue,CurrentLocationSpan); }
        break;
      case 38: // statement -> ONELINECOMMENT
{ CurrentSemanticValue.StatementValue = new OneLineCommentNode(ValueStack[ValueStack.Depth-1].stringValue,CurrentLocationSpan); }
        break;
      case 39: // loop -> WHILE, "(", expression, ")", statement
{ CurrentSemanticValue.LoopValue = new WhileLoopNode(ValueStack[ValueStack.Depth-3].ExpressionValue,ValueStack[ValueStack.Depth-1].StatementValue,CurrentLocationSpan); }
        break;
      case 40: // loop -> DO, statement, WHILE, "(", expression, ")"
{ CurrentSemanticValue.LoopValue = new DoWhileLoopNode(ValueStack[ValueStack.Depth-5].StatementValue,ValueStack[ValueStack.Depth-2].ExpressionValue,CurrentLocationSpan); }
        break;
      case 41: // loop -> LOOP, "(", shortStatement, ";", expression, ";", shortStatement, ")", 
               //         statement
{ CurrentSemanticValue.LoopValue = new BuiltInLoopNode(ValueStack[ValueStack.Depth-7].StatementValue,ValueStack[ValueStack.Depth-5].ExpressionValue,ValueStack[ValueStack.Depth-3].StatementValue,ValueStack[ValueStack.Depth-1].StatementValue,CurrentLocationSpan); }
        break;
      case 42: // fullIf -> simpleStatement
{ CurrentSemanticValue.StatementValue = ValueStack[ValueStack.Depth-1].StatementValue; }
        break;
      case 43: // fullIf -> if, fullIf, ELSE, fullIf
{ CurrentSemanticValue.StatementValue = new IfElseNode(ValueStack[ValueStack.Depth-4].ExpressionValue,ValueStack[ValueStack.Depth-3].StatementValue,ValueStack[ValueStack.Depth-1].StatementValue,CurrentLocationSpan); }
        break;
      case 44: // if -> IF, "(", expression, ")"
{ CurrentSemanticValue.ExpressionValue = ValueStack[ValueStack.Depth-2].ExpressionValue; }
        break;
      case 45: // shortStatement -> varsDefine
{CurrentSemanticValue.StatementValue = ValueStack[ValueStack.Depth-1].StatementValue; }
        break;
      case 46: // shortStatement -> assign
{CurrentSemanticValue.StatementValue = ValueStack[ValueStack.Depth-1].StatementValue; }
        break;
      case 47: // shortStatement -> members
{CurrentSemanticValue.StatementValue = ValueStack[ValueStack.Depth-1].MemberValue; }
        break;
      case 48: // shortStatement -> goto
{ CurrentSemanticValue.StatementValue = ValueStack[ValueStack.Depth-1].StatementValue; }
        break;
      case 49: // shortStatement -> loopSpecial
{ CurrentSemanticValue.StatementValue = ValueStack[ValueStack.Depth-1].StatementValue; }
        break;
      case 50: // shortStatement -> empty
{ CurrentSemanticValue.StatementValue = null; }
        break;
      case 51: // loopSpecial -> BREAK
{ CurrentSemanticValue.StatementValue = new BreakNode(true,CurrentLocationSpan); }
        break;
      case 52: // loopSpecial -> BREAK, intNumber
{ CurrentSemanticValue.StatementValue = new BreakNode(ValueStack[ValueStack.Depth-1].ConstValue,CurrentLocationSpan); }
        break;
      case 53: // loopSpecial -> BREAK, ALL
{ CurrentSemanticValue.StatementValue = new BreakNode(false,CurrentLocationSpan); }
        break;
      case 54: // loopSpecial -> CONTINUE
{ CurrentSemanticValue.StatementValue = new ContinueNode(true, CurrentLocationSpan); }
        break;
      case 55: // loopSpecial -> CONTINUE, intNumber
{ CurrentSemanticValue.StatementValue = new ContinueNode(ValueStack[ValueStack.Depth-1].ConstValue,CurrentLocationSpan); }
        break;
      case 56: // loopSpecial -> CONTINUE, ALL
{CurrentSemanticValue.StatementValue = new ContinueNode(false, CurrentLocationSpan);}
        break;
      case 57: // goto -> GOTO, LabelName
{ CurrentSemanticValue.StatementValue = new GOTOLabelNode(ValueStack[ValueStack.Depth-1].IdentiferValue,CurrentLocationSpan); }
        break;
      case 58: // LabelName -> identifer
{ CurrentSemanticValue.IdentiferValue = ValueStack[ValueStack.Depth-1].IdentiferValue; }
        break;
      case 59: // LabelName -> INTNUM
{ CurrentSemanticValue.IdentiferValue = new IdentiferNode(ValueStack[ValueStack.Depth-1].stringValue,CurrentLocationSpan); }
        break;
      case 60: // varsDefine -> "+", type, vars
{ CurrentSemanticValue.StatementValue = new VarDefineNode(ValueStack[ValueStack.Depth-2].TypeValue,ValueStack[ValueStack.Depth-1].IdentiferValueCollection,CurrentLocationSpan); }
        break;
      case 61: // varsDefine -> varDefineAssign
{ CurrentSemanticValue.StatementValue = ValueStack[ValueStack.Depth-1].StatementValue; }
        break;
      case 62: // varDefineAssign -> "+", type, identifer, "=", expression
{ CurrentSemanticValue.StatementValue = new VarDefineAssignNode(ValueStack[ValueStack.Depth-4].TypeValue,ValueStack[ValueStack.Depth-3].IdentiferValue,ValueStack[ValueStack.Depth-1].ExpressionValue,CurrentLocationSpan); }
        break;
      case 63: // varDefineAssign -> "+", AUTO, identifer, "=", expression
{ CurrentSemanticValue.StatementValue = new VarDefineAssignAutoNode(ValueStack[ValueStack.Depth-3].IdentiferValue,ValueStack[ValueStack.Depth-1].ExpressionValue,CurrentLocationSpan); }
        break;
      case 64: // vars -> identifer
{ CurrentSemanticValue.IdentiferValueCollection = new IdentiferCollection(); CurrentSemanticValue.IdentiferValueCollection.Add(ValueStack[ValueStack.Depth-1].IdentiferValue); }
        break;
      case 65: // vars -> vars, ",", identifer
{ CurrentSemanticValue.IdentiferValueCollection = ValueStack[ValueStack.Depth-3].IdentiferValueCollection; ValueStack[ValueStack.Depth-3].IdentiferValueCollection.Add(ValueStack[ValueStack.Depth-1].IdentiferValue); }
        break;
      case 66: // assign -> members, "=", expression
{ CurrentSemanticValue.StatementValue = new AssignNode(ValueStack[ValueStack.Depth-3].MemberValue,ValueStack[ValueStack.Depth-1].ExpressionValue,AssignKind.Assign,CurrentLocationSpan); }
        break;
      case 67: // members -> member
{ CurrentSemanticValue.MemberValue = ValueStack[ValueStack.Depth-1].MemberValue; }
        break;
      case 68: // members -> member, ".", members
{ CurrentSemanticValue.MemberValue = ValueStack[ValueStack.Depth-3].MemberValue; CurrentSemanticValue.MemberValue.Child = ValueStack[ValueStack.Depth-1].MemberValue; }
        break;
      case 69: // member -> method
{ CurrentSemanticValue.MemberValue = ValueStack[ValueStack.Depth-1].MemberValue; }
        break;
      case 70: // member -> field
{ CurrentSemanticValue.MemberValue = ValueStack[ValueStack.Depth-1].FieldValue; }
        break;
      case 71: // field -> genericField
{ CurrentSemanticValue.FieldValue = ValueStack[ValueStack.Depth-1].FieldValue ; }
        break;
      case 72: // field -> identifer, indexs
{ CurrentSemanticValue.FieldValue = new FieldNode(ValueStack[ValueStack.Depth-2].IdentiferValue,null,ValueStack[ValueStack.Depth-1].IndexerArgumentsValueCollection,CurrentLocationSpan) ; }
        break;
      case 73: // genericField -> identifer, leftGeneric
{ CurrentSemanticValue.FieldValue = new FieldNode(ValueStack[ValueStack.Depth-2].IdentiferValue,ValueStack[ValueStack.Depth-1].TypeValueCollection,null,CurrentLocationSpan) ; }
        break;
      case 74: // method -> identifer, relaxLeftGeneric, methodRight
{ CurrentSemanticValue.MemberValue = new MethodNode(ValueStack[ValueStack.Depth-3].IdentiferValue,ValueStack[ValueStack.Depth-2].TypeValueCollection,ValueStack[ValueStack.Depth-1].MethodValue,CurrentLocationSpan) ; }
        break;
      case 75: // method -> TYPEOF, "(", type, ")"
{ CurrentSemanticValue.MemberValue = new TypeOfNode(ValueStack[ValueStack.Depth-2].TypeValue,CurrentLocationSpan); }
        break;
      case 76: // relaxLeftGeneric -> leftGeneric
{ CurrentSemanticValue.TypeValueCollection = ValueStack[ValueStack.Depth-1].TypeValueCollection; }
        break;
      case 77: // relaxLeftGeneric -> empty
{ CurrentSemanticValue.TypeValueCollection = null; }
        break;
      case 78: // leftGeneric -> SHIELD, "<", genericArgs, ">"
{ CurrentSemanticValue.TypeValueCollection = ValueStack[ValueStack.Depth-2].TypeValueCollection; }
        break;
      case 79: // indexs -> "[", indexsArgs, "]"
{ CurrentSemanticValue.IndexerArgumentsValueCollection = ValueStack[ValueStack.Depth-2].IndexerArgumentsValueCollection;}
        break;
      case 80: // indexs -> empty
{ CurrentSemanticValue.IndexerArgumentsValueCollection = null; }
        break;
      case 81: // indexsArgs -> expressionArg
{ CurrentSemanticValue.IndexerArgumentsValueCollection = new IndexerArgumentsCollection(ValueStack[ValueStack.Depth-1].ExpressionArgumentValue); }
        break;
      case 82: // indexsArgs -> indexsArgs, ",", expressionArg
{ ValueStack[ValueStack.Depth-3].IndexerArgumentsValueCollection.Add(ValueStack[ValueStack.Depth-1].ExpressionArgumentValue); CurrentSemanticValue.IndexerArgumentsValueCollection = ValueStack[ValueStack.Depth-3].IndexerArgumentsValueCollection; }
        break;
      case 83: // methodRight -> "(", methodArgs, ")", indexs
{ CurrentSemanticValue.MethodValue = new MethodInfo(ValueStack[ValueStack.Depth-3].MethodArgumentsValueCollection,ValueStack[ValueStack.Depth-1].IndexerArgumentsValueCollection) ; }
        break;
      case 84: // methodRight -> "(", ")", indexs
{ CurrentSemanticValue.MethodValue = new MethodInfo(null,ValueStack[ValueStack.Depth-1].IndexerArgumentsValueCollection) ; }
        break;
      case 85: // methodArgs -> methodArg
{ CurrentSemanticValue.MethodArgumentsValueCollection  = new MethodArgumentsCollection(ValueStack[ValueStack.Depth-1].FactArgumentValue); }
        break;
      case 86: // methodArgs -> methodArgs, ",", methodArg
{ ValueStack[ValueStack.Depth-3].MethodArgumentsValueCollection.Add(ValueStack[ValueStack.Depth-1].FactArgumentValue); CurrentSemanticValue.MethodArgumentsValueCollection = ValueStack[ValueStack.Depth-3].MethodArgumentsValueCollection; }
        break;
      case 87: // expressionArg -> expression
{ CurrentSemanticValue.ExpressionArgumentValue = new ExpressionArgumentNode(ValueStack[ValueStack.Depth-1].ExpressionValue,CurrentLocationSpan); }
        break;
      case 88: // methodArg -> expressionArg
{ CurrentSemanticValue.FactArgumentValue = ValueStack[ValueStack.Depth-1].ExpressionArgumentValue; }
        break;
      case 89: // methodArg -> REF, refFields
{ CurrentSemanticValue.FactArgumentValue = new RefArgumentNode(ValueStack[ValueStack.Depth-1].FieldValue,CurrentLocationSpan); }
        break;
      case 90: // refField -> identifer, relaxLeftGeneric
{ CurrentSemanticValue.FieldValue = new FieldNode(ValueStack[ValueStack.Depth-2].IdentiferValue,ValueStack[ValueStack.Depth-1].TypeValueCollection,null,CurrentLocationSpan) ; }
        break;
      case 91: // refFields -> refField
{ CurrentSemanticValue.FieldValue = ValueStack[ValueStack.Depth-1].FieldValue; }
        break;
      case 92: // refFields -> refField, ".", refFields
{ CurrentSemanticValue.FieldValue = ValueStack[ValueStack.Depth-3].FieldValue; CurrentSemanticValue.FieldValue.Child = ValueStack[ValueStack.Depth-1].FieldValue; }
        break;
      case 93: // expression -> mathExpression
{ CurrentSemanticValue.ExpressionValue = ValueStack[ValueStack.Depth-1].ExpressionValue; }
        break;
      case 94: // expression -> expression, AS, type
{ CurrentSemanticValue.ExpressionValue = new AsCastNode(ValueStack[ValueStack.Depth-3].ExpressionValue,ValueStack[ValueStack.Depth-1].TypeValue,CurrentLocationSpan); }
        break;
      case 95: // expression -> expression, IS, type
{ CurrentSemanticValue.ExpressionValue = new IsCastNode(ValueStack[ValueStack.Depth-3].ExpressionValue,ValueStack[ValueStack.Depth-1].TypeValue,CurrentLocationSpan); }
        break;
      case 96: // mathExpression -> mathExpression, "==", mathExpression
{ CurrentSemanticValue.ExpressionValue = new BinaryNode(ValueStack[ValueStack.Depth-3].ExpressionValue,ValueStack[ValueStack.Depth-1].ExpressionValue,BinaryOperation.Equally,CurrentLocationSpan); }
        break;
      case 97: // mathExpression -> mathExpression, "<>", mathExpression
{ CurrentSemanticValue.ExpressionValue = new BinaryNode(ValueStack[ValueStack.Depth-3].ExpressionValue,ValueStack[ValueStack.Depth-1].ExpressionValue,BinaryOperation.NotEqually,CurrentLocationSpan); }
        break;
      case 98: // mathExpression -> mathExpression, ">", mathExpression
{ CurrentSemanticValue.ExpressionValue = new BinaryNode(ValueStack[ValueStack.Depth-3].ExpressionValue,ValueStack[ValueStack.Depth-1].ExpressionValue,BinaryOperation.Great,CurrentLocationSpan); }
        break;
      case 99: // mathExpression -> mathExpression, "<", mathExpression
{ CurrentSemanticValue.ExpressionValue = new BinaryNode(ValueStack[ValueStack.Depth-3].ExpressionValue,ValueStack[ValueStack.Depth-1].ExpressionValue,BinaryOperation.Less,CurrentLocationSpan); }
        break;
      case 100: // mathExpression -> mathExpression, ">=", mathExpression
{ CurrentSemanticValue.ExpressionValue = new BinaryNode(ValueStack[ValueStack.Depth-3].ExpressionValue,ValueStack[ValueStack.Depth-1].ExpressionValue,BinaryOperation.GreatEqls,CurrentLocationSpan); }
        break;
      case 101: // mathExpression -> mathExpression, "<=", mathExpression
{ CurrentSemanticValue.ExpressionValue = new BinaryNode(ValueStack[ValueStack.Depth-3].ExpressionValue,ValueStack[ValueStack.Depth-1].ExpressionValue,BinaryOperation.LessEqls,CurrentLocationSpan); }
        break;
      case 102: // mathExpression -> mathExpression, "+", mathExpression
{ CurrentSemanticValue.ExpressionValue = new BinaryNode(ValueStack[ValueStack.Depth-3].ExpressionValue,ValueStack[ValueStack.Depth-1].ExpressionValue,BinaryOperation.Plus,CurrentLocationSpan); }
        break;
      case 103: // mathExpression -> mathExpression, "-", mathExpression
{ CurrentSemanticValue.ExpressionValue = new BinaryNode(ValueStack[ValueStack.Depth-3].ExpressionValue,ValueStack[ValueStack.Depth-1].ExpressionValue,BinaryOperation.Minus,CurrentLocationSpan); }
        break;
      case 104: // mathExpression -> mathExpression, "*", mathExpression
{ CurrentSemanticValue.ExpressionValue = new BinaryNode(ValueStack[ValueStack.Depth-3].ExpressionValue,ValueStack[ValueStack.Depth-1].ExpressionValue,BinaryOperation.Mul,CurrentLocationSpan); }
        break;
      case 105: // mathExpression -> mathExpression, "/", mathExpression
{ CurrentSemanticValue.ExpressionValue = new BinaryNode(ValueStack[ValueStack.Depth-3].ExpressionValue,ValueStack[ValueStack.Depth-1].ExpressionValue,BinaryOperation.Div,CurrentLocationSpan); }
        break;
      case 106: // mathExpression -> mathExpression, ":", mathExpression
{ CurrentSemanticValue.ExpressionValue = new BinaryNode(ValueStack[ValueStack.Depth-3].ExpressionValue,ValueStack[ValueStack.Depth-1].ExpressionValue,BinaryOperation.DivTrunc,CurrentLocationSpan); }
        break;
      case 107: // mathExpression -> mathExpression, "%", mathExpression
{ CurrentSemanticValue.ExpressionValue = new BinaryNode(ValueStack[ValueStack.Depth-3].ExpressionValue,ValueStack[ValueStack.Depth-1].ExpressionValue,BinaryOperation.Mod,CurrentLocationSpan); }
        break;
      case 108: // mathExpression -> mathExpression, AND, mathExpression
{ CurrentSemanticValue.ExpressionValue = new BinaryNode(ValueStack[ValueStack.Depth-3].ExpressionValue,ValueStack[ValueStack.Depth-1].ExpressionValue,BinaryOperation.And,CurrentLocationSpan); }
        break;
      case 109: // mathExpression -> mathExpression, OR, mathExpression
{ CurrentSemanticValue.ExpressionValue = new BinaryNode(ValueStack[ValueStack.Depth-3].ExpressionValue,ValueStack[ValueStack.Depth-1].ExpressionValue,BinaryOperation.Or,CurrentLocationSpan); }
        break;
      case 110: // mathExpression -> mathExpression, XOR, mathExpression
{ CurrentSemanticValue.ExpressionValue = new BinaryNode(ValueStack[ValueStack.Depth-3].ExpressionValue,ValueStack[ValueStack.Depth-1].ExpressionValue,BinaryOperation.Xor,CurrentLocationSpan); }
        break;
      case 111: // mathExpression -> mathExpression, LSHIFT, mathExpression
{ CurrentSemanticValue.ExpressionValue = new BinaryNode(ValueStack[ValueStack.Depth-3].ExpressionValue,ValueStack[ValueStack.Depth-1].ExpressionValue,BinaryOperation.LShift,CurrentLocationSpan); }
        break;
      case 112: // mathExpression -> mathExpression, RSHIFT, mathExpression
{ CurrentSemanticValue.ExpressionValue = new BinaryNode(ValueStack[ValueStack.Depth-3].ExpressionValue,ValueStack[ValueStack.Depth-1].ExpressionValue,BinaryOperation.RShift,CurrentLocationSpan); }
        break;
      case 113: // mathExpression -> "+", mathExpression
{ CurrentSemanticValue.ExpressionValue = new UnaryNode(ValueStack[ValueStack.Depth-1].ExpressionValue,UnaryOperation.Plus,CurrentLocationSpan); }
        break;
      case 114: // mathExpression -> "-", mathExpression
{ CurrentSemanticValue.ExpressionValue = new UnaryNode(ValueStack[ValueStack.Depth-1].ExpressionValue,UnaryOperation.Minus,CurrentLocationSpan); }
        break;
      case 115: // mathExpression -> INVERSE, mathExpression
{ CurrentSemanticValue.ExpressionValue = new UnaryNode(ValueStack[ValueStack.Depth-1].ExpressionValue,UnaryOperation.Inverse,CurrentLocationSpan); }
        break;
      case 116: // mathExpression -> NEW, genericType, methodRight
{ CurrentSemanticValue.ExpressionValue = new NewUnaryNode(ValueStack[ValueStack.Depth-2].TypeNameValue,ValueStack[ValueStack.Depth-1].MethodValue,NewUnaryKind.Object,CurrentLocationSpan); }
        break;
      case 117: // mathExpression -> NEW, ARRAY, "(", type, ",", methodArgs, ")", indexs
{CurrentSemanticValue.ExpressionValue = new NewUnaryNode(ValueStack[ValueStack.Depth-5].TypeValue,ValueStack[ValueStack.Depth-3].MethodArgumentsValueCollection,ValueStack[ValueStack.Depth-1].IndexerArgumentsValueCollection,NewUnaryKind.Array,CurrentLocationSpan);}
        break;
      case 118: // mathExpression -> SHIELD, "(", type, ")", mathExpression
{ CurrentSemanticValue.ExpressionValue = new ExplicitCastNode(ValueStack[ValueStack.Depth-3].TypeValue,ValueStack[ValueStack.Depth-1].ExpressionValue,CurrentLocationSpan); }
        break;
      case 119: // mathExpression -> factor
{ CurrentSemanticValue.ExpressionValue = ValueStack[ValueStack.Depth-1].ExpressionValue; }
        break;
      case 120: // factor -> constant
{ CurrentSemanticValue.ExpressionValue = ValueStack[ValueStack.Depth-1].ExpressionValue; }
        break;
      case 121: // factor -> constant, ".", members
{ CurrentSemanticValue.ExpressionValue = new MemberAccessNode(ValueStack[ValueStack.Depth-3].ExpressionValue,ValueStack[ValueStack.Depth-1].MemberValue,CurrentLocationSpan); }
        break;
      case 122: // factor -> members
{ CurrentSemanticValue.ExpressionValue = new MemberAccessNode(null,ValueStack[ValueStack.Depth-1].MemberValue,CurrentLocationSpan); }
        break;
      case 123: // factor -> "(", expression, ")"
{ CurrentSemanticValue.ExpressionValue=ValueStack[ValueStack.Depth-2].ExpressionValue; }
        break;
      case 124: // factor -> "(", expression, ")", ".", members
{ CurrentSemanticValue.ExpressionValue = new MemberAccessNode(ValueStack[ValueStack.Depth-4].ExpressionValue,ValueStack[ValueStack.Depth-1].MemberValue,CurrentLocationSpan); }
        break;
      case 125: // constant -> intNumber
{ CurrentSemanticValue.ExpressionValue = ValueStack[ValueStack.Depth-1].ConstValue; }
        break;
      case 126: // constant -> FLOATNUM
{ CurrentSemanticValue.ExpressionValue = new ConstNode(new Constant(ConstKind.FloatNumber,ValueStack[ValueStack.Depth-1].stringValue),CurrentLocationSpan); }
        break;
      case 127: // constant -> STRING2
{ CurrentSemanticValue.ExpressionValue = new ParsableConstNode(ParsableConstant.CreatePLNString2(ValueStack[ValueStack.Depth-1].stringValue),CurrentLocationSpan); }
        break;
      case 128: // constant -> STRING1
{ CurrentSemanticValue.ExpressionValue = new ParsableConstNode(ParsableConstant.CreatePLNString1(ValueStack[ValueStack.Depth-1].stringValue),CurrentLocationSpan); }
        break;
      case 129: // constant -> TRUE
{ CurrentSemanticValue.ExpressionValue = new ParsableConstNode(new ParsableConstant(true),CurrentLocationSpan); }
        break;
      case 130: // constant -> FALSE
{ CurrentSemanticValue.ExpressionValue = new ParsableConstNode(new ParsableConstant(false),CurrentLocationSpan); }
        break;
      case 131: // constant -> NULL
{ CurrentSemanticValue.ExpressionValue = new ParsableConstNode(ParsableConstant.CreateForNull(),CurrentLocationSpan); }
        break;
      case 132: // intNumber -> INTNUM
{ CurrentSemanticValue.ConstValue = new ConstNode(new Constant(ConstKind.IntNumber,ValueStack[ValueStack.Depth-1].stringValue),CurrentLocationSpan); }
        break;
      case 133: // arrayType -> ARRAY, type
{ CurrentSemanticValue.TypeValue = new ArrayTypeNode(ValueStack[ValueStack.Depth-1].TypeValue,CurrentLocationSpan); }
        break;
      case 134: // arrayType -> ARRAY, "[", "]", type
{ CurrentSemanticValue.TypeValue = new ArrayTypeNode(ValueStack[ValueStack.Depth-1].TypeValue,CurrentLocationSpan); }
        break;
      case 135: // arrayType -> ARRAY, "[", dimension, "]", type
{ CurrentSemanticValue.TypeValue = new ArrayTypeNode(ValueStack[ValueStack.Depth-1].TypeValue,ValueStack[ValueStack.Depth-3].IntValue,CurrentLocationSpan); }
        break;
      case 136: // dimension -> ","
{ CurrentSemanticValue.IntValue = 2; }
        break;
      case 137: // dimension -> dimension, ","
{ CurrentSemanticValue.IntValue = ValueStack[ValueStack.Depth-2].IntValue + 1; }
        break;
      case 138: // type -> genericType
{ CurrentSemanticValue.TypeValue = ValueStack[ValueStack.Depth-1].TypeNameValue; }
        break;
      case 139: // type -> arrayType
{ CurrentSemanticValue.TypeValue = ValueStack[ValueStack.Depth-1].TypeValue ; }
        break;
      case 140: // genericType -> genericTypeSing
{ CurrentSemanticValue.TypeNameValue = ValueStack[ValueStack.Depth-1].TypeNameValue; }
        break;
      case 141: // genericType -> genericTypeSing, ".", genericType
{ CurrentSemanticValue.TypeNameValue = ValueStack[ValueStack.Depth-3].TypeNameValue; CurrentSemanticValue.TypeNameValue.Child = ValueStack[ValueStack.Depth-1].TypeNameValue; }
        break;
      case 142: // genericArgs -> type
{ CurrentSemanticValue.TypeValueCollection =  new TypeCollection(); CurrentSemanticValue.TypeValueCollection.Add(ValueStack[ValueStack.Depth-1].TypeValue); }
        break;
      case 143: // genericArgs -> genericArgs, ",", type
{ValueStack[ValueStack.Depth-3].TypeValueCollection.Add(ValueStack[ValueStack.Depth-1].TypeValue);  CurrentSemanticValue.TypeValueCollection=ValueStack[ValueStack.Depth-3].TypeValueCollection; }
        break;
      case 144: // genericTypeSing -> identifer, "<", genericArgs, ">"
{ CurrentSemanticValue.TypeNameValue = new TypeNameNode(ValueStack[ValueStack.Depth-4].IdentiferValue,ValueStack[ValueStack.Depth-2].TypeValueCollection,CurrentLocationSpan); }
        break;
      case 145: // genericTypeSing -> identifer, SHIELD, "<", genericArgs, ">"
{ CurrentSemanticValue.TypeNameValue = new TypeNameNode(ValueStack[ValueStack.Depth-5].IdentiferValue,ValueStack[ValueStack.Depth-2].TypeValueCollection,CurrentLocationSpan); }
        break;
      case 146: // genericTypeSing -> identifer
{ CurrentSemanticValue.TypeNameValue = new TypeNameNode(ValueStack[ValueStack.Depth-1].IdentiferValue,null,CurrentLocationSpan); }
        break;
      case 147: // identifer -> ID
{ CurrentSemanticValue.IdentiferValue = new IdentiferNode(ValueStack[ValueStack.Depth-1].stringValue,LocationStack[LocationStack.Depth-1]); }
        break;
      case 148: // identifer -> ALL
{ CurrentSemanticValue.IdentiferValue = new IdentiferNode(ValueStack[ValueStack.Depth-1].stringValue,LocationStack[LocationStack.Depth-1]); }
        break;
      case 149: // identifer -> DISABLE_SYSTEM_LIBRARY
{ CurrentSemanticValue.IdentiferValue = new IdentiferNode(ValueStack[ValueStack.Depth-1].stringValue,LocationStack[LocationStack.Depth-1]); }
        break;
      case 150: // identifer -> CONSOLE_APPLICATION
{ CurrentSemanticValue.IdentiferValue = new IdentiferNode(ValueStack[ValueStack.Depth-1].stringValue,LocationStack[LocationStack.Depth-1]);  }
        break;
      case 151: // identifer -> WINDOWS_APPLICATION
{ CurrentSemanticValue.IdentiferValue = new IdentiferNode(ValueStack[ValueStack.Depth-1].stringValue,LocationStack[LocationStack.Depth-1]);  }
        break;
    }
  }

  protected override string TerminalToString(int terminal)
  {
    if (aliasses != null && aliasses.ContainsKey(terminal))
        return aliasses[terminal];
    else if (((Tokens)terminal).ToString() != terminal.ToString(CultureInfo.InvariantCulture))
        return ((Tokens)terminal).ToString();
    else
        return CharToString((char)terminal);
  }

}
}
